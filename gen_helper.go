// Copyright 2014 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ingore

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"path/filepath"
	"strings"
)

var (
	oldGenFiles = make(map[string]bool)
)

func main() {
	clearOldGenFiles()
	genIncludeFiles()
	printOldGenFiles()
}

func clearOldGenFiles() {
	ss, err := filepath.Glob("z_*.c")
	if err != nil {
		log.Fatal(err)
	}
	for i := 0; i < len(ss); i++ {
		ioutil.WriteFile(ss[i], []byte("#error file removed!!!\n"), 0666)
		oldGenFiles[ss[i]] = true
	}
}

func genIncludeFiles() {
	ss := sourceFileList
	for i := 0; i < len(ss); i++ {
		relpath := ss[i]
		newname := "z_libbpg_" + strings.Replace(relpath, "/", "_", -1)

		ioutil.WriteFile(newname, []byte(fmt.Sprintf(
			`// Copyright 2015 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Auto Generated By 'go generate', DONOT EDIT!!!

// +build cgo

#include "./internal/libbpg-0.9.5/%s"
`, relpath,
		)), 0666)

		delete(oldGenFiles, newname)
	}
}

func printOldGenFiles() {
	if len(oldGenFiles) == 0 {
		return
	}
	fmt.Printf("Removed Files:\n")
	for k, _ := range oldGenFiles {
		fmt.Printf("%s\n", k)
	}
	fmt.Printf("Total %d\n", len(oldGenFiles))
}

var sourceFileList = []string{
	// libavcodec
	"libavcodec/hevc_cabac.c",
	"libavcodec/hevc_filter.c",
	"libavcodec/hevc.c",
	"libavcodec/hevcpred.c",
	"libavcodec/hevc_refs.c",
	"libavcodec/hevcdsp.c",
	"libavcodec/hevc_mvs.c",
	"libavcodec/hevc_ps.c",
	"libavcodec/hevc_sei.c",
	"libavcodec/utils.c",
	"libavcodec/cabac.c",
	"libavcodec/golomb.c",
	"libavcodec/videodsp.c",

	// libavutil
	"libavutil/mem.c",
	"libavutil/buffer.c",
	"libavutil/log2_tab.c",
	"libavutil/frame.c",
	"libavutil/pixdesc.c",
	"libavutil/md5.c",

	// jctvc/TLibEncoder
	"jctvc/TLibEncoder/SyntaxElementWriter.cpp",
	"jctvc/TLibEncoder/TEncSbac.cpp",
	"jctvc/TLibEncoder/TEncBinCoderCABACCounter.cpp",
	"jctvc/TLibEncoder/TEncGOP.cpp",
	"jctvc/TLibEncoder/TEncSampleAdaptiveOffset.cpp",
	"jctvc/TLibEncoder/TEncBinCoderCABAC.cpp",
	"jctvc/TLibEncoder/TEncAnalyze.cpp",
	"jctvc/TLibEncoder/TEncEntropy.cpp",
	"jctvc/TLibEncoder/TEncTop.cpp",
	"jctvc/TLibEncoder/SEIwrite.cpp",
	"jctvc/TLibEncoder/TEncPic.cpp",
	"jctvc/TLibEncoder/TEncRateCtrl.cpp",
	"jctvc/TLibEncoder/WeightPredAnalysis.cpp",
	"jctvc/TLibEncoder/TEncSlice.cpp",
	"jctvc/TLibEncoder/TEncCu.cpp",
	"jctvc/TLibEncoder/NALwrite.cpp",
	"jctvc/TLibEncoder/TEncCavlc.cpp",
	"jctvc/TLibEncoder/TEncSearch.cpp",
	"jctvc/TLibEncoder/TEncPreanalyzer.cpp",

	// jctvc/TLibVideoIO
	"jctvc/TLibVideoIO/TVideoIOYuv.cpp",

	// jctvc/TLibCommon
	"jctvc/TLibCommon/TComWeightPrediction.cpp",
	"jctvc/TLibCommon/TComLoopFilter.cpp",
	"jctvc/TLibCommon/TComBitStream.cpp",
	"jctvc/TLibCommon/TComMotionInfo.cpp",
	"jctvc/TLibCommon/TComSlice.cpp",
	"jctvc/TLibCommon/ContextModel3DBuffer.cpp",
	"jctvc/TLibCommon/TComPic.cpp",
	"jctvc/TLibCommon/TComRdCostWeightPrediction.cpp",
	"jctvc/TLibCommon/TComTU.cpp",
	"jctvc/TLibCommon/TComPicSym.cpp",
	"jctvc/TLibCommon/TComPicYuv.cpp",
	"jctvc/TLibCommon/TComYuv.cpp",
	"jctvc/TLibCommon/TComTrQuant.cpp",
	"jctvc/TLibCommon/TComInterpolationFilter.cpp",
	"jctvc/TLibCommon/ContextModel.cpp",
	"jctvc/TLibCommon/TComSampleAdaptiveOffset.cpp",
	"jctvc/TLibCommon/SEI.cpp",
	"jctvc/TLibCommon/TComPrediction.cpp",
	"jctvc/TLibCommon/TComDataCU.cpp",
	"jctvc/TLibCommon/TComChromaFormat.cpp",
	"jctvc/TLibCommon/Debug.cpp",
	"jctvc/TLibCommon/TComRom.cpp",
	"jctvc/TLibCommon/TComPicYuvMD5.cpp",
	"jctvc/TLibCommon/TComRdCost.cpp",
	"jctvc/TLibCommon/TComPattern.cpp",
	"jctvc/TLibCommon/TComCABACTables.cpp",

	// jctvc/libmd5
	"jctvc/libmd5/libmd5.c",

	// jctvc
	"jctvc/TAppEncCfg.cpp",
	"jctvc/TAppEncTop.cpp",
	"jctvc/program_options_lite.cpp",

	// libbpg
	"libbpg.c",
	"bpgenc_util.c",
	"jctvc_glue.cpp",
}
